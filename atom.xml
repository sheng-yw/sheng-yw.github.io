<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博客</title>
  
  
  <link href="https://sheng-yw.github.io/atom.xml" rel="self"/>
  
  <link href="https://sheng-yw.github.io/"/>
  <updated>2022-01-06T03:33:45.976Z</updated>
  <id>https://sheng-yw.github.io/</id>
  
  <author>
    <name>wensheng.yws</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://sheng-yw.github.io/2022/01/06/nginx/"/>
    <id>https://sheng-yw.github.io/2022/01/06/nginx/</id>
    <published>2022-01-06T03:33:11.111Z</published>
    <updated>2022-01-06T03:33:45.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>1、安装<br>  1)、上传tgz压缩包至服务器<br>  2)、tar -zxvf nginx.tgz<br>  3)、执行 ./configure –prefix=自定义目录<br>  4)、make &amp;&amp; make install<br>  5)、cd 自定义目录<br>  6)、启动 ./sbin/nginx<br>  7)、重启 ./sbin/nginx -s reload<br>2、查看ng进程<br>  ps –ef | grep<br>3、查看ng服务<br>  ps -A | grep nginx    </p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>ng文件包括1、全局模块；2、http模块；3、events模块<br>http模块嵌套多个server,配置代理,缓存,日志等<br>server模块配置虚拟主机的相关参数，一个http中可以配置多个server<br>server中location块是处理符合请求规则的资源导向问题，也是我们主要配置的核心模块<br>loaction中匹配规则<br>location = /uri =开头表示精确匹配，只有完全匹配上才能生效<br>lcoation = ^ <del>/uri ^</del> 开头对URL路径进行前缀匹配，并且在正则之前<br>location ~ pattern 　~开头表示区分大小写的正则匹配。<br>location ~* pattern 　~*开头表示不区分大小写的正则匹配。<br>location /uri 不带任何修饰符，也表示前缀匹配，但是在正则匹配之后。<br>location / 　通用匹配，任何未匹配到其它location的请求都会匹配到，相当于switch中的default<br>location 与 root相结合表示的是实际请求的资源会自动拼接location后的uri<br>location 与 alias相结合表示的是实际请求的资源会去alias配置的路径去获取 但是后缀要加”/“</p><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nginx&quot;&gt;&lt;a href=&quot;#Nginx&quot; class=&quot;headerlink&quot; title=&quot;Nginx&quot;&gt;&lt;/a&gt;Nginx&lt;/h1&gt;&lt;p&gt;1、安装&lt;br&gt;  1)、上传tgz压缩包至服务器&lt;br&gt;  2)、tar -zxvf nginx.tgz&lt;br&gt; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sheng-yw.github.io/2021/12/09/es/"/>
    <id>https://sheng-yw.github.io/2021/12/09/es/</id>
    <published>2021-12-09T06:29:41.187Z</published>
    <updated>2021-12-09T08:09:13.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES是什么"><a href="#ES是什么" class="headerlink" title="ES是什么"></a>ES是什么</h1><h1 id="ES有什么用"><a href="#ES有什么用" class="headerlink" title="ES有什么用"></a>ES有什么用</h1><h1 id="ES怎么存，怎么取"><a href="#ES怎么存，怎么取" class="headerlink" title="ES怎么存，怎么取"></a>ES怎么存，怎么取</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES是什么&quot;&gt;&lt;a href=&quot;#ES是什么&quot; class=&quot;headerlink&quot; title=&quot;ES是什么&quot;&gt;&lt;/a&gt;ES是什么&lt;/h1&gt;&lt;h1 id=&quot;ES有什么用&quot;&gt;&lt;a href=&quot;#ES有什么用&quot; class=&quot;headerlink&quot; title=&quot;E</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sheng-yw.github.io/2021/08/26/node/"/>
    <id>https://sheng-yw.github.io/2021/08/26/node/</id>
    <published>2021-08-26T08:39:02.231Z</published>
    <updated>2022-02-21T03:19:24.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="egg框架"><a href="#egg框架" class="headerlink" title="egg框架"></a>egg框架</h1><h2 id="egg之框架统一错误处理"><a href="#egg之框架统一错误处理" class="headerlink" title="egg之框架统一错误处理"></a>egg之框架统一错误处理</h2><p>  config/default.config.js 中配置<br>  <code>config.onerror = &#123;</code><br>  <code>  all: (err, ctx) =&gt; &#123;</code><br>  <code>    ctx.set(&#123;&#39;Content-Type&#39;: &#39;application/json&#39;&#125;);</code><br>  <code>    ctx.status = 200;</code><br>  <code>    ctx.body = JSON.stringfy(&#123;</code><br>  <code>      success: false,</code><br>  <code>      message: err.message</code><br>  <code>    &#125;)</code><br>  <code>  &#125;</code><br>  <code>&#125;</code></p><h2 id="pm2相关"><a href="#pm2相关" class="headerlink" title="pm2相关"></a>pm2相关</h2><p>  pm2 list 查看启动的服务<br>  pm2 stop ip 停止某一个服务<br>  pm2 start pm2.json 在项目目录下 pm2 启动某一个项目<br>  pm2 delete ip 删除某一个服务<br>  pm2 restart ip 重启某个服务<br>  pm2 log ip 查看某一个服务的日志<br>  pm2 启动时指定node版本需要在pm2.json中配置 “interpreter”: “./node_modules/.bin/node”,<br>  或者在执行 pm2 start server.js –interpreter ./node_modules/.bin/node</p><h2 id="avn相关"><a href="#avn相关" class="headerlink" title="avn相关"></a>avn相关</h2><p>  avn 是一个自动切换node版本的管理工具，需要和nvm配合使用 npm i avn avn-nvm -g<br>  需要在项目中配置.node-version文件 内容例如：12.0.0<br>  cd 到当前目录中会自动切换到这个版本的node</p><h2 id="nodeinstall相关"><a href="#nodeinstall相关" class="headerlink" title="nodeinstall相关"></a>nodeinstall相关</h2><p>  nodeinstall 可以使node服务采用node_modules中的node 依赖而不依赖后端<br>  npm i nodeinstall -g<br>  安装完自身依赖以后执行 nodeinstall 10.0.0<br>  查看安装版本 ./node_modules/.bin/node -v</p><h2 id="爬虫下载的图片打不开-错误信息download-token-not-specified"><a href="#爬虫下载的图片打不开-错误信息download-token-not-specified" class="headerlink" title="爬虫下载的图片打不开 错误信息download token not specified"></a>爬虫下载的图片打不开 错误信息download token not specified</h2><p>  检查发现把url后面参数给截取了</p><h2 id="puppetter-包部署问题"><a href="#puppetter-包部署问题" class="headerlink" title="puppetter 包部署问题"></a>puppetter 包部署问题</h2><p>1、Chrome reversion is not downloaded<br>打包发现没有安装linux版本相关的chromu插件 需要手动安装 node ./node-modules/puppetter/install.js<br>2、Failed to launch the browser process! spawn<br>是因为linux服务缺少chromu相关插件，根据git相关问答提示进行安装相关依赖<br>实例化chromu时添加参数<br>await puppeteer.launch({<br>  headless: true,<br>  args: [‘–no-sandbox’, ‘–disable-setuid-sandbox’],<br>  executablePath: ‘/opt/conf/chrome/chrome-linux/chrome’<br>})</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;egg框架&quot;&gt;&lt;a href=&quot;#egg框架&quot; class=&quot;headerlink&quot; title=&quot;egg框架&quot;&gt;&lt;/a&gt;egg框架&lt;/h1&gt;&lt;h2 id=&quot;egg之框架统一错误处理&quot;&gt;&lt;a href=&quot;#egg之框架统一错误处理&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sheng-yw.github.io/2021/08/26/phone/"/>
    <id>https://sheng-yw.github.io/2021/08/26/phone/</id>
    <published>2021-08-26T08:30:15.715Z</published>
    <updated>2022-04-27T02:38:48.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端知识点"><a href="#移动端知识点" class="headerlink" title="移动端知识点"></a>移动端知识点</h1><h1 id="关于适配"><a href="#关于适配" class="headerlink" title="关于适配"></a>关于适配</h1><p>常见的适配 rem、rm、vw<br>rem 是根据设计图纸来设置 html 标签的 font-size 的大小，开发时在进行等比例换算成 rem<br>qq、uc 浏览器对小于 12px 的字体大小会按照 12px 来计算，这点需要注意计算出的 1rem 不要小于 12px</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端知识点&quot;&gt;&lt;a href=&quot;#移动端知识点&quot; class=&quot;headerlink&quot; title=&quot;移动端知识点&quot;&gt;&lt;/a&gt;移动端知识点&lt;/h1&gt;&lt;h1 id=&quot;关于适配&quot;&gt;&lt;a href=&quot;#关于适配&quot; class=&quot;headerlink&quot; title=&quot;关</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sheng-yw.github.io/2021/05/25/webpack/"/>
    <id>https://sheng-yw.github.io/2021/05/25/webpack/</id>
    <published>2021-05-25T02:51:12.272Z</published>
    <updated>2021-08-27T08:36:52.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Webpack构成"><a href="#Webpack构成" class="headerlink" title="Webpack构成"></a>Webpack构成</h1><h1 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h1><h1 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h1><h1 id="打包优化"><a href="#打包优化" class="headerlink" title="打包优化"></a>打包优化</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Webpack构成&quot;&gt;&lt;a href=&quot;#Webpack构成&quot; class=&quot;headerlink&quot; title=&quot;Webpack构成&quot;&gt;&lt;/a&gt;Webpack构成&lt;/h1&gt;&lt;h1 id=&quot;loader&quot;&gt;&lt;a href=&quot;#loader&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sheng-yw.github.io/2021/05/06/react/"/>
    <id>https://sheng-yw.github.io/2021/05/06/react/</id>
    <published>2021-05-06T10:13:12.626Z</published>
    <updated>2022-07-11T09:37:28.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-系列之-useState"><a href="#React-系列之-useState" class="headerlink" title="React 系列之 useState"></a>React 系列之 useState</h1><p>基本用法<br> <code>const [state, setState] = useState(initialState);</code><br>当然也可以写成<br><code>const state = useState(initialState)</code><br>state 为数组 state[0]为状态值 state[1]为更新状态的函数<br>我们知道 useState 跟新状态时为异步更新，setState 又没有跟之前版本提供回调，当想要同步获取最新值时可以这样<br><code>useEffect(() =&gt; &#123;</code><br><code>TODO 处理你的逻辑</code><br><code>&#125;, [state])</code><br>但是这个方法会在初始化时执行<br><code>setState(() =&gt; &#123;</code><br><code>TODO 处理你的逻辑</code><br><code>return newState</code><br><code>&#125;)</code><br>newState 为想要改变的最新值，在这个回调中处理逻辑</p><p>多次 setState 时 React 会自动合并成一次 setState，但是有些情况下是不会的，这时就需要使用<br>ReactDOM.unstable_batchedUpdates 这个 api 来手动处理多次合并一次</p><h1 id="React-系列中-useEffect"><a href="#React-系列中-useEffect" class="headerlink" title="React 系列中 useEffect"></a>React 系列中 useEffect</h1><p>useEffect 是可以让你在函数组件中执行副作用操作(相当于类组件中生命周期函数)<br>它可以看作是三个生命周期函数的组合<br>1、componentDidMount<br><code>useEffect(() =&gt; &#123;&#125;, [])</code><br>组件生命周期内执行一次<br>2、componentDidUpdate<br><code>useEffect(() =&gt; &#123;&#125;, [state])</code><br>此写法也会在初始化时执行，state 变化时再次执行<br>3、componentWillUnMount<br><code>useEffect(() =&gt; &#123;</code><br><code> return () =&gt; &#123;</code><br><code> //TODO 组件销毁前执行</code><br><code> &#125;</code><br><code>&#125;, [])</code></p><h1 id="useEffect-有哪些注意点"><a href="#useEffect-有哪些注意点" class="headerlink" title="useEffect 有哪些注意点"></a>useEffect 有哪些注意点</h1><p>1、假如说 useEffect 监听了多个 state,同事更新多个 state 情况会导致 useEffect 中函数执行多次，这样就需要特别处理多个 state 合并一个或者在里面进行判断(业务场景复杂多样，具体还是要在设计之初就考虑进去)<br> 2、禁止在条件语句中使用<br><code>if (name !== &#39;xx&#39;) &#123;</code><br><code> useEffect(() =&gt; &#123;&#125;, [])</code><br><code>&#125;</code></p><h1 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h1><p>在方法函数，由于不能使用 shouldComponentUpdate 处理性能问题，react hooks 新增了 useMemo<br>用来缓存数据，当渲染的数据需要根据 state、props 经过特定计算而来的时候可以使用 useMemo 函数缓存这个数据、避免重复调用计算函数浪费性能<br><code>const x = useMemo(() =&gt; &#123;</code><br><code>//TODO</code><br><code>&#125;, [xx])</code><br>如果 useMemo(fn, arr)第二个参数发生变化，则去执行 fn 否则只会执行一次，[]也是执行一次</p><h1 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h1><p>用来监听变量缓存或生成一个函数，fn 通常当作 props 进行传递用于子组件进行监听！<br><code>const fn = useCallback(() =&gt; &#123;</code><br><code>//TODO</code><br><code>&#125;, [xx])</code><br>``</p><h1 id="useContent"><a href="#useContent" class="headerlink" title="useContent"></a>useContent</h1><p>全局上下文配合 usereducer 可以做到全局的状态管理 替代 mobx、redux<br><code>function createContainer(useHook)&#123;</code><br><code> const Context = react.createContext(null)</code><br><code> const Provider = props =&gt; &#123;</code><br><code> const value = useHook(props.initialValue)</code><br><code> retrun (</code><br><code> &lt;Context.Provider value=&#123;value&#125;&gt;</code><br><code> &#123;props.children&#125;</code><br><code> &lt;/Context.Provider&gt;</code><br><code> )</code><br><code> &#125;</code><br><code> const useContainer = () =&gt; &#123;</code><br><code> const value = React.useContext(Context)</code><br><code> return value</code><br><code> &#125;</code><br><code> return &#123;</code><br><code> Provider,</code><br><code> useContainer</code><br><code> &#125;</code></p><p><code>const fn = createContainer(() =&gt; &#123;</code><br><code> const reducer = (state, action) =&gt; &#123;</code><br><code> switch(action.type) &#123;</code><br><code> case &#39;xx&#39;:</code><br><code> return &#123;...state, xx: action.xx&#125;</code><br><code> break;</code><br><code> &#125;</code><br><code> &#125;)</code><br><code> const initState = &#123;</code><br><code> xx: xx</code><br><code> &#125;</code><br><code> const [state, dispatch] = useReducer(reducer, initState)</code><br><code> return &#123;</code><br><code> state, dispatch</code><br><code> &#125;</code><br>最外围组件使用<br><code>&lt;Logic.Provider&gt;xxxx&lt;/Logic.Provider&gt;</code><br>组件内使用 先引入<br><code>const &#123; state, dispatch &#125; = Logic.useContainer()</code></p><h1 id="diff-算法"><a href="#diff-算法" class="headerlink" title="diff 算法"></a>diff 算法</h1><p>传统 diff 算法，需要遍历整棵树的节点然后进行比较，是一个深度递归的过程，运算复杂度常常是 O(n^3)<br>react 中 diff 采用了优化策略使运算复杂度降到 O(n)<br>1、忽略 Web UI 中 DOM 节点跨层级移动；<br>2、拥有相同类型的两个组件产生的 DOM 结构也是相似的，不同类型的两个组件产生的 DOM 结构则不近相同<br>3、对于同一层级的一组子节点，通过分配唯一唯一 id 进行区分（key 值）<br>三个优化<br>1、tree diff<br>基于策略一，React 的做法是把 dom tree 分层级，对于两个 dom tree 只比较同一层次的节点，忽略 Dom 中节点跨层级移动操作，只对同一个父节点下的所有的子节点进行比较。如果对比发现该父节点不存在则直接删除该节点下所有子节点，不会做进一步比较，这样只需要对 dom tree 进行一次遍历就完成了两个 tree 的比较<br>2、component diff<br>React 应用是基于组件构建的，对于组件的比较优化侧重于以下几点：<br>1). 同一类型组件遵从 tree diff 比较 v-dom 树<br>2). 不通类型组件，先将该组件归类为 dirty component，替换下整个组件下的所有子节点<br>3). 同一类型组件 Virtual Dom 没有变化，React 允许开发者使用 shouldComponentUpdate（）来判断该组件是否进行 diff，运用得当可以节省 diff 计算时间，提升性能<br>3、element diff<br>对于同一层级的 element 节点，diff 提供了以下 3 种节点操作：<br>1). INSERT_MARKUP 插入节点：对全新节点执行节点插入操作<br>2). MOVE_EXISING 移动节点：组件新集合中有组件旧集合中的类型，且 element 可更新，即组件调用了 receiveComponent，这时可以复用之前的 dom，执行 dom 移动操作<br>3). REMOVE_NODE 移除节点：此时有两种情况：组件新集合中有组件旧集合中的类型，但对应的 element 不可更新、旧组件不在新集合里面，这两种情况需要执行节点删除操作</p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h1 id="react-生命周期"><a href="#react-生命周期" class="headerlink" title="react 生命周期"></a>react 生命周期</h1><p>1)、挂载阶段<br>constructor(props)：初始化 state 和 props 数据<br>getDerivedStateFromProps(nextProps, prevState)<br>render()<br>componentDidMount()<br>2)、更新阶段<br>getDerivedStateFromProps(nextProps, prevState)<br>shouldComponentUpdate(nextProps, nextState)<br>render()<br>static getSnapshotBeforeUpdate(prevProps, prevState)<br>componentDidUpdate()<br>3)、卸载<br>componentWillUnmount()</p><h1 id="react-中高阶组件运用了什么设计模式"><a href="#react-中高阶组件运用了什么设计模式" class="headerlink" title="react 中高阶组件运用了什么设计模式"></a>react 中高阶组件运用了什么设计模式</h1><p>使用了装饰器模式，装饰模式的特点是不需要改变 被装饰对象 本身，而只是在外面套一个外壳接口。</p><h2 id="函数组件优化"><a href="#函数组件优化" class="headerlink" title="函数组件优化"></a>函数组件优化</h2><p>使用 React.memo()对组件进行优化，跟 PureComponet 效果一样，浅比较 props。需要深层比较需要在这个函数传入第二个比较函数它有两个参数，preProps，nextProps</p><h2 id="React-18版本新特性"><a href="#React-18版本新特性" class="headerlink" title="React 18版本新特性"></a>React 18版本新特性</h2><p>1)、使用createRoot代替ReactDOM.render()<br>  createRoot(document.getElementById(‘root’)).render(<App />)<br>2)、使用unmount替代unmountComponentComponentAtNode<br>3)、setState同步/异步<br>这是 React 此次版本中最大的破坏性更新，并且无法向下兼容<br>React 中的批处理简单来说就是将多个状态更新合并为一次重新渲染，以获得更好的性能，在 React 18 之前，React 只能在组件的生命周期函数或者合成事件函数中进行批处理。默认情况下，Promise、setTimeout 以及原生事件中是不会对其进行批处理的。如果需要保持批处理，则可以用 unstable_batchedUpdates 来实现，但它不是一个正式的 API<br>如果想在React 18退出批处理使用 flushSync api<br>flushSync 会以函数为作用域，函数内部的多个 setState 仍然为批量更新<br>4)、组件可以返回null<br>5)、startTransition<br>  被startTransition 回调包裹的 setState 触发的渲染 被标记为不紧急渲染，这些渲染可能被其他紧急渲染所抢占<br>  React提供了一个带有 isPending 转换标志的 useTransition，React 将在状态转换期间提供视觉反馈，并在转换发生时保持浏览器响应。</p><h2 id="React18版本有哪些坑"><a href="#React18版本有哪些坑" class="headerlink" title="React18版本有哪些坑"></a>React18版本有哪些坑</h2><p>React18中StrictMode模式下useEffect在dev模式下会执行两次<br>解决办法是去掉StrictMode</p><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><p>1、Create React App 初始化react18的项目，遇到一个由于 react-scripts 引起的 could not resolve dependency 错误：<br>  解决办法安装的时候尝试加上 –force</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;React-系列之-useState&quot;&gt;&lt;a href=&quot;#React-系列之-useState&quot; class=&quot;headerlink&quot; title=&quot;React 系列之 useState&quot;&gt;&lt;/a&gt;React 系列之 useState&lt;/h1&gt;&lt;p&gt;基本用法&lt;b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sheng-yw.github.io/2021/04/22/day-question/"/>
    <id>https://sheng-yw.github.io/2021/04/22/day-question/</id>
    <published>2021-04-22T05:59:50.528Z</published>
    <updated>2022-05-12T01:13:18.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h1><h2 id="bind、call、apply-三者有什么异同"><a href="#bind、call、apply-三者有什么异同" class="headerlink" title="bind、call、apply 三者有什么异同"></a>bind、call、apply 三者有什么异同</h2><p>1、三者都是改变传入函数的 this 指向<br>2、call、apply 都是立即执行函数改变本次函数调用的 this 指向<br>3、call 方法传参是参数列表形式、apply 方法传参是数组形式<br>4、bind 方法是返回一个永久改变 this 的新函数，传参方式是参数列表形式</p><h2 id="看如下代码写出-a-是什么及打印结果"><a href="#看如下代码写出-a-是什么及打印结果" class="headerlink" title="看如下代码写出 a 是什么及打印结果"></a>看如下代码写出 a 是什么及打印结果</h2><p><code>if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3)&#123;</code><br><code> console.log(a)</code><br><code>&#125;</code><br>答案 valueOf 版本<br><code>const a = &#123;</code><br><code> value: 1,</code><br><code>&#125;</code><br><code>a.__proto__.valueOf = function () &#123;</code><br><code> return a.value++</code><br><code>&#125;</code><br><code>a = &#123;value: 4&#125;</code><br>答案 tostring 版本<br><code>const a = [3, 2, 1]</code><br><code>a.__proto_.toString = function () &#123;</code><br><code> return a.pop()</code><br><code>&#125;</code><br><code> a = []</code><br>使用了 js 中自动转换调用 valueOf/toString</p><h2 id="React-生命周期及其作用"><a href="#React-生命周期及其作用" class="headerlink" title="React 生命周期及其作用"></a>React 生命周期及其作用</h2><p>挂载阶段<br>constructor:<br>1、用于初始化内部状态，很少使用<br>2、唯一一个可以直接修改 state 的地方<br>getDerivedStateFromProps<br>render<br>componentDidMount<br>更新阶段<br>getDerivedStateFromProps<br>shouldComponentUpdate<br>render<br>getSnapshotBeforeUpdate<br>componentDidUpdate<br>卸载阶段<br>componentWillUnmount</p><h2 id="开发中常用-api"><a href="#开发中常用-api" class="headerlink" title="开发中常用 api"></a>开发中常用 api</h2><p>Array 篇<br><code>[].map(it =&gt; return it) //返回一个新数组</code><br><code>[].indexOf(it) //返回的是当前元素的下标 没有则返回-1</code><br><code>[].includes(it) //判断当前元素是否在数组内</code><br><code>[].concat([]) //拼接两个数组 返回拼接后新数组</code><br><code>[].splice(index, length, item) //获取从index开始有length数的数组 item有值则会添加到原数组中</code><br><code>[].sort((a, b) =&gt; a-b) //从小到大 b-a从大到小</code><br><code>[].reduce((pre, next) =&gt; pre+next) //数组求和</code><br><code>[].find(it =&gt; it) //从数组中查找某一个符合条件的元素 找不到为undefined</code><br><code>[].filter(it =&gt; it) //从数组中筛选符合条件的元素 找不到为[]</code><br><code>[].forEach(it =&gt; console.log(it)) //遍历这个数组</code><br><code>[].push(it) //向数组尾部添加一个元素</code><br><code>[].pop() //尾部弹出一个元素 返回弹出的元素 原数组改变</code><br><code>[].shift() //数组头部弹出一个元素 返回弹出的元素 原数组改变</code><br><code>[].unshift //数组头部添加一个元素 原数组改变</code><br><code>[1,[2,[3]]].flat(2) =&gt; [1,2,3] //打平一个多维数组 参数是层级 返回新数组原数组不变</code><br>Object 篇<br><code>Object.prototype.toString(arg) //可用于判断元素是什么类型</code><br><code>Object.keys(arg) //返回这个对象所有属性的数组</code><br><code>Object.values(arg) //返回这个对象所有属性值的数组</code><br><code>Object.defineProperties(obj, props) //方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象 Vue3之前最重要的一个api</code><br>``</p><h2 id="检测类型的方法"><a href="#检测类型的方法" class="headerlink" title="检测类型的方法"></a>检测类型的方法</h2><p>typeof 使用来判断检测对象的属性 但是 typeof null 返回的是 object、并非是 bug 只是 js 设计如此、区分数组跟对象时不能正确判断<br>instanceof 用来检测左侧引用的<strong>proto</strong>是否在右侧对象的 Ptototype 上，通过原型链查找故这个方法不能判断基本数据类型<br>Object.prototype.toString.call(param) 返回具体是什么类型，适用所有类型<br>通过构造函数指向判断<br><code>let a = 123</code><br> <code>a.constructor === Number // true</code></p><h2 id="hash-路由跟-history-路由的区别"><a href="#hash-路由跟-history-路由的区别" class="headerlink" title="hash 路由跟 history 路由的区别"></a>hash 路由跟 history 路由的区别</h2><p>1、直观来看 hash 就是 url 中带#号 history 不带<br>2、hash 监听 url 中 hash 值的变化(#号后面的内容),不向服务器发送请求就可以改变页面展示<br>history 则是监听 url 整体变化，回去请求服务端需要两端共同支持<br>3、hash 是支持低版本浏览器的，#号后面值的变化都会触发 window.onhashchange,不论浏览器的<br>前进还是后退都会触发<br>history 则是基于 Html5 新增 API 产生的</p><h2 id="px、rem、em-有什么区别"><a href="#px、rem、em-有什么区别" class="headerlink" title="px、rem、em 有什么区别"></a>px、rem、em 有什么区别</h2><p>px 代表像素，相对长度单位，像素 px 是相对于显示器屏幕分辨率而言的，1px 就是屏幕上的一个小方格点<br>rem 相对单位，相较于页面根元素大小而定，在做适配时常用，只需要改变跟元素大小就能调整所有字体大小<br>em 相对单位，相对于最近父元素大小而言，如未设置则取浏览器默认大小</p><h2 id="关于使用-React-lazy-的问题"><a href="#关于使用-React-lazy-的问题" class="headerlink" title="关于使用 React.lazy 的问题"></a>关于使用 React.lazy 的问题</h2><p>使用 React.lazy 进行加载组件不做处理会报错 A React component suspended while rendering, but no fallback UI was specified.<br>错误原因是用 lazy 之后, 存在加载中的空档, react 不知道在这个空当中该显示什么, 所以需要我们指定<br>解决办法<br>使用 Suspense 组件包裹路由组件、进行提示加载的空档做什么<br><code>&lt;Suspense</code><br><code> fallback=&#123;</code><br><code> &lt;Spin spinning&gt;</code><br><code> &lt;div style=&#123;&#123; width: '100%', height: '100vh' &#125;&#125; /&gt;</code><br><code> &lt;/Spin&gt;</code><br><code> &#125;</code><br><code>&gt;</code><br><code> &lt;Router&gt;</code><br><code> &lt;Switch&gt;</code><br><code> &lt;Route path=&quot;/create&quot; component=&#123;Create&#125;/&gt;</code><br><code> &lt;/Switch&gt;</code><br><code> &lt;/Router&gt;</code><br><code>&lt;/Suspense&gt;</code></p><h2 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h2><p>400 请求无效<br>403 禁止访问 无权限<br>404 资源找不到、路径错误或者没有要请求的资源<br>405 资源被禁止<br>408 资源超时<br>200 请求 ok<br>502 请求方法不匹配<br>500 服务器出错</p><h2 id="webpack-优化手段"><a href="#webpack-优化手段" class="headerlink" title="webpack 优化手段"></a>webpack 优化手段</h2><p>1、优化 loader 查找范围 例如 Babel 只转换 src 下的文件<br>2、cache-loader 缓存 loader 处理结果<br>3、多线程处理打包<br>4、删除无用 css purgecss-webpack-plugin 配合 mini-css-extract-plugin 使用<br>5、以 CDN 方式加载资源 add-asset-html-cdn-webpack-plugin 插件<br>6、对图片进行压缩优化 image-webpack-loader<br>7、通过 speed-measure-webpack-plugin 插件查看哪个模块打包费时</p><h2 id="React-和-ReactDOM-的区别"><a href="#React-和-ReactDOM-的区别" class="headerlink" title="React 和 ReactDOM 的区别"></a>React 和 ReactDOM 的区别</h2><p>React 是 React 库的入口，可以使用 jsx 语法、组件、ref、hooks 等属性或 api<br>ReactDOM 只负责和浏览器或 DOM 操作相关</p><h2 id="redux-与-mobx-的区别"><a href="#redux-与-mobx-的区别" class="headerlink" title="redux 与 mobx 的区别"></a>redux 与 mobx 的区别</h2><p>redux 将数据保存在单一 store 中 mobx 分散存放的</p><h2 id="Promise-中-api"><a href="#Promise-中-api" class="headerlink" title="Promise 中 api"></a>Promise 中 api</h2><p>all 顺序执行 有一个失败都为失败<br>allSettled 顺序执行 可以获取每一个的状态<br>race 获取第一个的状态</p><h2 id="CMD、AMD、CommonJS、ES6"><a href="#CMD、AMD、CommonJS、ES6" class="headerlink" title="CMD、AMD、CommonJS、ES6"></a>CMD、AMD、CommonJS、ES6</h2><p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出，AMD 规范则是非同步加载模块，允许指定回调函数。AMD 是对于依赖的模块提前执行，依赖前置<br>AMD 标准中，定义了下面两个 API：<br><code>require([module], callback)</code><br><code>define(id, [depends], callback)</code><br>即通过 define 来定义一个模块，然后使用 require 来加载一个模块。 并且，require 还支持 CommonJS 的模块导出方式。<br>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。CMD 是同步模块定义、是延迟执行，推崇依赖就近，即只在需要用到某个模块的时候再 require<br><code>define(function(require, exports, module) &#123; </code><br><code>var $ = require(&#39;jquery&#39;);</code><br><code>var C = require(&#39;./c.js&#39;);</code><br><code>exports.sayHi = ...</code><br><code>module.exports = ...</code><br><code>&#125;)</code><br>CommonJS 规范—module.exports<br>其核心思想就是通过 require 方法来同步加载所要依赖的其他模块，然后通过 exports 或者 module.exports 来导出需要暴露的接口。<br>ES6—export/import<br>在 ES6 中，我们可以使用 import 关键字引入模块，通过 exprot 关键字导出模块，功能较之于前几个方案更为强大，也是我们所推崇的，但是由于 ES6 目前无法在浏览器中执行，所以，我们只能通过 babel 将不被支持的 import 编译为当前受到广泛支持的 require。</p><h2 id="webpack-核心"><a href="#webpack-核心" class="headerlink" title="webpack 核心"></a>webpack 核心</h2><p>Entry：入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。告诉 webpack 要使用哪个模块作为构建项目的起点，默认为./src/index.js<br>output ：出口，告诉 webpack 在哪里输出它打包好的代码以及如何命名，默认为./dist<br>Module：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。<br>Chunk：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。<br>Loader：模块转换器，用于把模块原内容按照需求转换成新内容。<br>Plugin：扩展插件，在 Webpack 构建流程中的特定时机会广播出对应的事件，插件可以监听这些事件的发生，在特定时机做对应的事情。</p><h2 id="webpack-功能"><a href="#webpack-功能" class="headerlink" title="webpack 功能"></a>webpack 功能</h2><p>代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等等<br>文件优化：压缩 JavaScript、CSS、html 代码，压缩合并图片等<br>代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载<br>模块合并：在采用模块化的项目有很多模块和文件，需要构建功能把模块分类合并成一个文件<br>自动刷新：监听本地源代码的变化，自动构建，刷新浏览器<br>代码校验：在代码被提交到仓库前需要检测代码是否符合规范，以及单元测试是否通过<br>自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</p><h2 id="浅谈-webpack-构建流程"><a href="#浅谈-webpack-构建流程" class="headerlink" title="浅谈 webpack 构建流程"></a>浅谈 webpack 构建流程</h2><p>执行 npm run xxx 命令启动到结束会依次执行以下阶段<br>初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；<br>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；<br>确定入口：根据配置中的 entry 找出所有的入口文件；<br>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；<br>完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；<br>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；<br>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</p><h2 id="js-监听-dom-变化"><a href="#js-监听-dom-变化" class="headerlink" title="js 监听 dom 变化"></a>js 监听 dom 变化</h2><p>1、获取要监听的 dom<br>const dom = document.querySelector(‘#id’)<br>2、创建监听对象 MutationObserver<br>const hanldChange = function (dom, observer) {<br>console.log(dom, observer)<br>}<br>const mutationObserver = new MutationObserver(hanldChange)<br>3、定义监听属性、开启监听<br>const options = {<br>attributes: true<br>}<br>mutationObserver.observer(dom, options)<br>4、停止监听<br>mutationObserver.disconnect()<br>5、清除变动记录并返回记录值<br>const changes = mutationObserver.takeRecords()</p><h2 id="package-json-中版本～-含义"><a href="#package-json-中版本～-含义" class="headerlink" title="package.json 中版本～ ^含义"></a>package.json 中版本～ ^含义</h2><p>～表示例如 1.2.2 下载最新的 1.2.x 的最新包但不会低于 1.2.2<br>^表示 例如 1.2.2 下载 1.x.x 的最新包 不会低于 1.2.2</p><h2 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h2><p>闭包的产生条件：函数嵌套，内部函数引用外部函数变量，函数执行<br>延长变量的生命周期<br>容易内存泄漏需要手动释放内存</p><h2 id="new-做了哪些事情"><a href="#new-做了哪些事情" class="headerlink" title="new 做了哪些事情"></a>new 做了哪些事情</h2><p>1、创建一个新的对象<br>2、将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）<br>3、执行构造函数代码(为新对象赋值)<br>4、有无 return，有则返回 return 的对象，无则是把当前对象返回</p><h2 id="z-index-失效"><a href="#z-index-失效" class="headerlink" title="z-index 失效"></a>z-index 失效</h2><p>改变 position 为 static</p><h2 id="从输入-url-到页面展示经历哪些过程"><a href="#从输入-url-到页面展示经历哪些过程" class="headerlink" title="从输入 url 到页面展示经历哪些过程"></a>从输入 url 到页面展示经历哪些过程</h2><p>1、DNS 解析域名（先从浏览器缓存中找-系统 hosts 中-域名服务器-根域名服务器）<br>2、TCP 链接（三次握手 请求资源,四次挥手断开链接）<br>3、处理返回页面信息<br>4、浏览器渲染（解析标签生成 dom 树，解析 css 生成 cssom 树，两者结合生成 render 树结合 layout 进行布局绘制展示）</p><h2 id="script-defer-和-async-有什么区别"><a href="#script-defer-和-async-有什么区别" class="headerlink" title="script defer 和 async 有什么区别"></a>script defer 和 async 有什么区别</h2><p>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行阻塞浏览器渲染<br>defer 和 async 都属于异步执行加载<br>async 是资源加载完毕会立刻执行，乱序的<br>defer 是资源加载完毕不是立刻执行，而是在元素解析完成之后，DOMContentLoaded 事件执行之前完成执行</p><h2 id="强缓存协商缓存"><a href="#强缓存协商缓存" class="headerlink" title="强缓存协商缓存"></a>强缓存协商缓存</h2><p>1、强缓存：不会向服务器发送请求，直接从缓存资源中获取，状态码 200<br>2、协商缓存：向服务器发送请求，服务器会根据 http 请求头中字段来判断是否命中缓存，如果命中，从缓存中读取数据，返回 304 状态码<br>共同点：都是从客户端读取资源<br>强缓存需要 Cache-Control 字段，其中 max-age 属性是控制缓存最大时长(单位是秒),过期会重新发送请求。public 表示可以被任意对象缓存(客户端，代理服务器),private 表示只能在客户端缓存，no-cache 是加载资源前，强制发送请求到服务器进行协商缓存；no-store 表示不被任何缓存。<br>协商缓存需要用到 Etag 字段与 if-noneif-none-matc，Etag 是 HTTP 响应头中字段，Etag 值是根据资源内容编码生成的一段字符串(资源标识)，内容不同则生成不同的 Etag，再次请求时会带有 if-none-match 字段，值为上一次 Etag 的值，服务器根据这两个 Etag 进行比较，对比成功返回 304 从客户端获取，失败则返回新的 Etag 和资源。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;每日一题&quot;&gt;&lt;a href=&quot;#每日一题&quot; class=&quot;headerlink&quot; title=&quot;每日一题&quot;&gt;&lt;/a&gt;每日一题&lt;/h1&gt;&lt;h2 id=&quot;bind、call、apply-三者有什么异同&quot;&gt;&lt;a href=&quot;#bind、call、apply-三者有什么异</summary>
      
    
    
    
    
  </entry>
  
</feed>
